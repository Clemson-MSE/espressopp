# -*- mode: python -*-
# 
# Script that collects the files that comprise an ESPResSo++ class
# TODO:
# * check namespace in the file?
# * add class to bindings.cpp
# * add class to __init__.py?

import os.path, time

print('Collecting ESPResSo++-class files.')

# The number of lines from the beginning of the file to read
NUM_LINES = 5
ESPP_CLASS_ID = 'ESPP_CLASS'
AUTOMAKEFILE = 'SubMakefile.am'

hppfiles = list()
pyfiles = set()
cppfiles = set()

# Collect all possible files
def pickfiles(arg, dirname, fnames):
    # clip off './'
    dirname = dirname[2:]
    for fname in fnames:
        if fname.endswith('.hpp'):
            hppfiles.append(os.path.join(dirname, fname))
        if fname.endswith('.cpp'):
            cppfiles.add(os.path.join(dirname, fname))
        if fname.endswith('.py'):
            pyfiles.add(os.path.join(dirname, fname))

os.path.walk('.', pickfiles, None)

# Check files whether they are class files
classhpp = list()
classcpp = list()
classpy = list()

for hppfile in hppfiles:
    isclass = False
    infile = open(hppfile, 'r')
    for i in range(5):
        isclass = infile.readline().find(ESPP_CLASS_ID) != -1
        if isclass: break
    infile.close()

    if isclass:
        classhpp.append(hppfile)

        cppfile = hppfile[:-4] + '.cpp'
        if cppfile in cppfiles:
            classcpp.append(cppfile)

        pyfile = hppfile[:-4] + '.py'
        if pyfile in pyfiles:
            classpy.append(pyfile)

print('Found %d class header files.' % (len(classhpp)))        
print('Found %d class implementation files.' % (len(classcpp)))        
print('Found %d python class files.' % (len(classpy)))        

# Output to AUTOMAKEFILE
print('Generating %s...' % (AUTOMAKEFILE,))
outfile = open(AUTOMAKEFILE, 'w')

outfile.write("""\
# This file was autogenerated by collect_classes.py on %s
# Please do not modify it!

""" % (time.asctime()))

# header files
outfile.write("noinst_HEADERS += \\\n\t")
outfile.write(" \\\n\t".join(classhpp))

# cpp files
outfile.write("\n\nlibespresso_common_la_SOURCES += \\\n\t")
outfile.write(" \\\n\t".join(classcpp))

# cpp files
outfile.write("\n\nnobase_python_SCRIPTS += \\\n\t")
outfile.write(" \\\n\t".join(classpy))

outfile.close()
print('Done.')


