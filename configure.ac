################################################################### 
#                                                                 #
#  configure.ac for ESPResSo++                                    #
#                                                                 #
#  - use ./autogen.sh to generate the configure script            #
#                                                                 #
################################################################### 

AC_INIT([ESPResSo++],[0.9],[espressopp-user@www.espresso-pp.de],[espressopp])
AC_PREREQ([2.59])
# basic autoconf configuration
AC_CONFIG_MACRO_DIR(build-aux/macros)
AC_CONFIG_AUX_DIR(build-aux)
AC_CONFIG_SRCDIR([src/main/_espresso.cpp])

# we use automake
AM_INIT_AUTOMAKE([gnu subdir-objects dist-bzip2])

# import paths from the EXTRA_PREFIXES precious variable
AXES_IMPORT_EXTRA_PREFIXES

cat >& AS_MESSAGE_FD <<EOF
**********************************************************************
*         Checking for compiler and dynamic library support          *
**********************************************************************
EOF

# we use C++ as main code language
AC_LANG([C++])

#libtool needs a c compiler
AC_PROG_CC( cc icc xlc gcc )

# We are using mpi, that is why we cannot set CC in the AC_PROG_CXX macro,
# since autoconf checks that the created file can be executed. This would
# fail on platforms where MPI executables can only be run through a batchqueue.
AC_CHECK_PROGS(CXX, mpixlcxx mpCC mpiCC mpc++)
#other important flags like CXXFLAGS will be set by libtool anyway

# libtool is used for building the shared libraries
LT_INIT([dlopen])

AM_CONDITIONAL(ENABLE_STATIC, [test "x$enable_static" = "xyes"])
AM_CONDITIONAL(ENABLE_SHARED, [test "x$enable_shared" = "xyes"])

cat >& AS_MESSAGE_FD <<EOF
**********************************************************************
*         Checking system header files                               *
**********************************************************************
EOF

AC_CHECK_HEADERS(sys/time.h sys/resource.h)
AS_IF([test "$ac_cv_header_sys_time_h" != "yes"], 
        [AC_CHECK_HEADER(time.h)])

cat >& AS_MESSAGE_FD <<EOF
**********************************************************************
*       Checking for required libraries and tools                    *
**********************************************************************
EOF

###################################################################
#
# PYTHON
#
###################################################################

# Python libs
AXES_PYTHON
if test "x$axes_cv_python_lib" = "xno" || test "x$axes_cv_python_include" = "xno"; then	
	  AC_MSG_FAILURE([Could not find python.])
fi

# python executable
AC_PATH_PROG([PYTHON], [python], [no])

###################################################################
#
# MPI
#
###################################################################

# MPI lib
AXES_MPI
if test "x$axes_mpi" = "xno"; then
       AC_MSG_FAILURE([Could not find mpi.])
fi

# mpiexec executable
if test "x$axes_cv_mpi" != "xno"; then
  AC_ARG_VAR([MPIEXEC], [MPI command mpiexec])
  if test "x$MPIEXEC" = "x"; then
    AC_PATH_PROG([MPIEXEC], [mpiexec], [no])
  fi

  AC_MSG_CHECKING([for mympiexec])
  AC_ARG_WITH([mympiexec],
     AS_HELP_STRING([--with-mympiexec@<:@=script@:>@],
      [specify the program or script that should be used to run the parallel build tests.
Defaults to BUILDDIR/mympiexec.sh]),
      [if test "$withval" = "no"; then
         MYMPIEXEC=""
       else
	 MYMPIEXEC="$withval"
         dir=`AS_DIRNAME([$MYMPIEXEC])`
	 if test "x$dir" = "x."; then
           MYMPIEXEC="`pwd`/$MYMPIEXEC"
         fi
      fi],
      [ MYMPIEXEC="`pwd`/mympiexec.sh" ])
  AC_MSG_RESULT($MYMPIEXEC)
  AC_SUBST(MYMPIEXEC)
fi

ESPRESSO_MPIEXEC="`pwd`/bin/espp_mpiexec.sh"
AC_SUBST(ESPRESSO_MPIEXEC)

AC_CACHE_SAVE

###################################################################
#                                                                 #
#  boost libs
#                                                                 #
###################################################################


AC_MSG_CHECKING([whether to use external boost libraries])
AC_ARG_WITH([external-boost],
    AS_HELP_STRING([--with-external-boost],
      [specify whether to use external boost libraries (instead of the
       internal ones). If an external boost library is used, all boost
       libraries have to be specified in LIBS, and CPPFLAGS and
       LDFLAGS must be set accordingly.])
    ,, [with_external_boost="no"])

AS_IF([test "x$with_external_boost" = "xno"],
    [ AC_MSG_RESULT([no])
      # if we use the internal boost, set the configuration variables
      boost_internal_dir=`pwd`"/contrib/boost"
      ESPRESSO_BOOST_LIBS="$boost_internal_dir/libespresso_boost.la"
      BOOST_UNITTEST_LIBS="$boost_internal_dir/libboost_unit_test_framework.la"
      AM_CPPFLAGS="$AM_CPPFLAGS -I\$(top_srcdir)/contrib/boost" ],
    [ AC_MSG_RESULT([yes])
      # if we use external boost, do some tests

      # Test whether we can link a boost program
      AC_CACHE_CHECK([whether a boost program can be linked],
        axes_cv_external_boost_works,
        [ AC_LANG_PUSH([C++])
          AC_LINK_IFELSE(AC_LANG_PROGRAM([[
                @%:@include <boost/archive/basic_archive.hpp>
		@%:@include <boost/python.hpp>
                @%:@include <boost/mpi.hpp>
               using namespace boost::python;
              ]],[[
                // boost.serialization
                boost::archive::tracking_type t;
                // boost.python
		boost::python::detail::init_module("test", 0);
                // boost.mpi
                int x;
                boost::mpi::environment env;
                boost::mpi::communicator world;
                world.send(0, x);
                world.recv(0,0,x);

                return 0;
              ]]), 
            [ axes_cv_external_boost_works=yes ],
            [ axes_cv_external_boost_works=no ])
          AC_LANG_POP([C++])])
      AS_IF([test "x$axes_cv_external_boost_works" = "xno"],
        [ AC_MSG_FAILURE([Cannot compile a boost program using external boost!])])

      # Test using the unittest framework
      AC_CACHE_CHECK([whether a boost unittest can be dynamically linked],
        axes_cv_boost_unittest_dynamic,
        [ AC_LANG_PUSH([C++])
          # test link a program using dynamic linking
          AC_LINK_IFELSE(AC_LANG_SOURCE([[
                @%:@define BOOST_TEST_DYN_LINK
                @%:@define BOOST_TEST_MODULE conftest
                @%:@include <boost/test/unit_test.hpp>
                BOOST_AUTO_TEST_CASE(conftestcase) {
                  BOOST_CHECK(true);
                }
              ]]), 
            [ axes_cv_boost_unittest_dynamic=yes ],
            [ axes_cv_boost_unittest_dynamic=no ])
          AC_LANG_POP([C++]) ])

      AS_IF([test "x$axes_cv_boost_unittest_dynamic" = "xyes"],
        [ AC_DEFINE([BOOST_TEST_DYN_LINK], 1, [whether to link the unit test framework library dynamically]) ],
        [ AC_CACHE_CHECK([whether a boost unittest can be statically linked],
            axes_cv_boost_unittest_static,
            [ AC_LANG_PUSH([C++])
              # test link a program using static linking
              AC_LINK_IFELSE(AC_LANG_SOURCE([[
                    @%:@define BOOST_TEST_MODULE conftest
                    @%:@include <boost/test/unit_test.hpp>
                    BOOST_AUTO_TEST_CASE(conftestcase) {
                      BOOST_CHECK(true);
                    }
                  ]]), 
                [ axes_cv_boost_unittest_static=yes ],
                [ axes_cv_boost_unittest_static=no ])
              AC_LANG_POP([C++]) ])

          AS_IF([test "x$axes_cv_boost_unittest_static" != "xno"],
            [ AC_MSG_FAILURE([Can't link against the boost unittest framework!])])])
]) # external boost

EXTERNAL_BOOST=$with_external_boost
AC_SUBST(EXTERNAL_BOOST)
AM_CONDITIONAL([EXTERNAL_BOOST],[test "x$with_external_boost" = "xyes"])
AC_SUBST(ESPRESSO_BOOST_LIBS)
AC_SUBST(BOOST_UNITTEST_LIBS)
AC_SUBST(RM)

AC_CACHE_SAVE

################################################################### 
#                                                                 #
#  DOXYGEN                                                        #
#                                                                 #
################################################################### 
AC_ARG_VAR([DOXYGEN], [Doxygen code documentation tool])
AC_PATH_PROG([DOXYGEN],[doxygen],[no])
AM_CONDITIONAL(HAVE_DOXYGEN,[test "x$DOXYGEN" != "xno"])

################################################################### 
#                                                                 #
#  ASTYLE                                                        #
#                                                                 #
################################################################### 
AC_ARG_VAR([ASTYLE], [Artistic style code formatting tool])
AC_PATH_PROG([ASTYLE],[astyle],[no])

################################################################### 
#
#  LOGGING
#
################################################################### 
AC_MSG_CHECKING([what logging level to activate])
AC_ARG_ENABLE([logging], AS_HELP_STRING([--enable-logging@<:@=level@:>@],
      [enable logging at the given level (off, fatal, error, warn, info,
       debug, trace). Defaults to "debug".]) 
      ,, [enable_logging="debug"])
AS_IF([test "x$enable_logging" = "xno"], [enable_logging="off"])
AS_IF([test "x$enable_logging" = "xyes"], [enable_logging="debug"])

AS_IF([test "x$enable_logging" = "xoff"], [AC_DEFINE(LOG4ESPP_LEVEL_OFF, [], [Logging level])])
AS_IF([test "x$enable_logging" = "xfatal"], [AC_DEFINE(LOG4ESPP_LEVEL_FATAL, [], [Logging level])])
AS_IF([test "x$enable_logging" = "xerror"], [AC_DEFINE(LOG4ESPP_LEVEL_ERROR, [], [Logging level])])
AS_IF([test "x$enable_logging" = "xwarn"], [AC_DEFINE(LOG4ESPP_LEVEL_WARN, [], [Logging level])])
AS_IF([test "x$enable_logging" = "xinfo"], [AC_DEFINE(LOG4ESPP_LEVEL_INFO, [], [Logging level])])
AS_IF([test "x$enable_logging" = "xdebug"], [AC_DEFINE(LOG4ESPP_LEVEL_DEBUG, [], [Logging level])])
AS_IF([test "x$enable_logging" = "xtrace"], [AC_DEFINE(LOG4ESPP_LEVEL_TRACE, [], [Logging level])])

AC_MSG_RESULT($enable_logging)

cat >& AS_MESSAGE_FD <<EOF
**********************************************************************
*                        Writing output files                        *
**********************************************************************
EOF

################################################################### 
#                                                                 #
#  SET ADDITIONAL MAKEFILE VARIABLES                              #
#                                                                 #
################################################################### 
# required by build-aux/macros/axes_python.am
pythondir=${libdir}/${PACKAGE_TARNAME}/espresso
AC_SUBST(pythondir)
# required by src/Makefile.am
AC_SUBST([abs_top_builddir])

# determine CPPFLAGS 
AM_CPPFLAGS="$AM_CPPFLAGS -I\$(top_srcdir)/src -I\$(top_srcdir)/src/include"
test "x$PYTHON_CPPFLAGS" != "xno" && AM_CPPFLAGS="$AM_CPPFLAGS \$(PYTHON_CPPFLAGS)" 
AC_SUBST([AM_CPPFLAGS])

################################################################### 
#                                                                 #
#  Generation of output                                           #
#                                                                 #
################################################################### 

AC_CONFIG_HEADERS([src/acconfig.hpp])

AC_CONFIG_FILES([Makefile 
                 contrib/Makefile
                 contrib/boost/Makefile
                 contrib/mpi4py/Makefile
                 src/Makefile 
		 doc/Makefile
		 doc/dg/Makefile
                 test/Makefile
                 test/modules/Makefile
                 test/modules/logging/Makefile 
                 test/external/Makefile 
                 test/external/mpi/Makefile 
                 test/external/boost.mpi/Makefile 
                 test/external/boost.python/Makefile 
                 ])

AC_CONFIG_FILES([bin/utexec],
                [chmod ugo+x bin/utexec])
AC_CONFIG_FILES([bin/espp_mpiexec.sh],
                [chmod ugo+x bin/espp_mpiexec.sh])
AC_CONFIG_FILES([bin/espp_format],
                [chmod ugo+x bin/espp_format])
AC_CONFIG_FILES([test/runtests.sh],
                [chmod ugo+x test/runtests.sh])

# espresso setup scripts
AC_CONFIG_FILES([
	src/main/_setupPath.py:src/main/_setupPath.py.build.in
	src/main/_setupPath.py.install:src/main/_setupPath.py.install.in
       	espresso_setup.sh:setup/espresso_setup.sh.build.in
       	espresso_setup.sh.install:setup/espresso_setup.sh.install.in
       	espresso_setup.csh:setup/espresso_setup.csh.build.in
       	espresso_setup.py:setup/espresso_setup.py.build.in
       	espresso_setup.py.install:setup/espresso_setup.py.install.in
       ])

# create a link to the src dir by the name of espresso
# so that Python can find the package espresso
AC_CONFIG_COMMANDS([espresso],
	[AS_IF([test ! -e espresso],[$LN_S src espresso],
               [test ! -h espresso], [
	         AC_MSG_WARN(["espresso exists and is not a link, please remove"])
		 exit 1
               ])])

# now make sure that all config files are generated

AC_OUTPUT

################################################################### 
#                                                                 #
#  Summary                                                        #
#                                                                 #
################################################################### 

test "x$EXTRA_PREFIXES" != "x" || EXTRA_PREFIXES="(none)"
test "x$PYTHON_LIBS" != "x" || PYTHON_LIBS="(none required)"
test "x$PYTHON_CPPFLAGS" != "x" || PYTHON_CPPFLAGS="(none required)"
test "x$MPI_LIBS" != "x" || MPI_LIBS="(none required)"
test "x$DOXYGEN" != "xno" || DOXYGEN="(not available)"
AS_IF([test "x$MYMPIEXEC" = "x"],
        [MYMPIEXEC="disabled by user, no parallel tests will be run"],
        [MYMPIEXEC="will try to use $MYMPIEXEC"])
test "x$AM_CPPFLAGS" != "x" || AM_CPPFLAGS="(empty)"
if [ test "x$with_external_boost" = "xyes" ]; then
   external_boost="(external)"
else
   external_boost="(internal)"
fi

cat >config.summary << EOF


**********************************************************************
*                         Configuration summary                      *
**********************************************************************
*****************
** COMPILATION **
*****************
 * C++-compiler: CXX=$CXX
 * User provided compilation flags:
   - EXTRA_PREFIXES=$EXTRA_PREFIXES
   - CPPFLAGS=$CPPFLAGS
   - AM_CPPFLAGS=$AM_CPPFLAGS (automatically determined by configure)
   - CXXFLAGS=$CXXFLAGS
   - LDFLAGS=$LDFLAGS
   - logging level: $enable_logging
 * Library types to build:
   - static libs: $enable_static
   - shared libs: $enable_shared

*****************
** LIBRARIES   **
*****************
 * Python:
   - Headers: $PYTHON_CPPFLAGS
   - Libraries: $PYTHON_LIBS
 * MPI:
   - Libraries: $MPI_LIBS
 * Boost: $external_boost

*****************
** OTHER TOOLS **
*****************
 * mpiexec:
    - $MYMPIEXEC
    - fallback: $MPIEXEC
 * Doxygen: $DOXYGEN
 * astyle: $ASTYLE
EOF

cat config.summary >&AS_MESSAGE_FD
cat config.summary >&AS_MESSAGE_LOG_FD

cat >&AS_MESSAGE_FD <<EOF

READY TO BUILD $PACKAGE_STRING

EOF
